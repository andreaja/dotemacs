<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<!-- Created by htmlize-1.34 in css mode. -->
<html>
  <head>
    <title>php-mode.el</title>
    <style type="text/css">
    <!--
      body {
        color: #000000;
        background-color: #ffffff;
      }
      .builtin {
        /* font-lock-builtin-face */
        color: #da70d6;
      }
      .comment {
        /* font-lock-comment-face */
        color: #b22222;
      }
      .constant {
        /* font-lock-constant-face */
        color: #5f9ea0;
      }
      .function-name {
        /* font-lock-function-name-face */
        color: #0000ff;
      }
      .keyword {
        /* font-lock-keyword-face */
        color: #a020f0;
      }
      .string {
        /* font-lock-string-face */
        color: #bc8f8f;
      }
      .type {
        /* font-lock-type-face */
        color: #228b22;
      }
      .variable-name {
        /* font-lock-variable-name-face */
        color: #b8860b;
      }
      .warning {
        /* font-lock-warning-face */
        color: #ff0000;
        font-weight: bold;
      }

      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
    -->
    </style>
  </head>
  <body>
    <pre>
<span class="comment">;;; php-mode.el --- major mode for editing PHP code
</span>
<span class="comment">;; Copyright (C) 1999, 2000, 2001, 2003, 2004 Turadg Aleahmad
;;               2008 Aaron S. Hawley
</span>
<span class="comment">;; Maintainer: Aaron S. Hawley &lt;ashawley at users.sourceforge.net&gt;
;; Author: Turadg Aleahmad, 1999-2004
;; Keywords: php languages oop
;; Created: 1999-05-17
;; Modified: 2007-01-02
;; X-URL:   http://php-mode.sourceforge.net/
</span>
(<span class="keyword">defconst</span> <span class="variable-name">php-mode-version-number</span> <span class="string">"1.4.0"</span>
  <span class="string">"PHP Mode version number."</span>)

<span class="comment">;;; License
</span>
<span class="comment">;; This file is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.
</span>
<span class="comment">;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
</span>
<span class="comment">;; You should have received a copy of the GNU General Public License
;; along with this file; if not, write to the Free Software
;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
;; 02110-1301, USA.
</span>
<span class="comment">;;; Usage
</span>
<span class="comment">;; Put this file in your Emacs lisp path (eg. site-lisp) and add to
;; your .emacs file:
;;
;;   (require 'php-mode)
</span>
<span class="comment">;; To use abbrev-mode, add lines like this:
;;   (add-hook 'php-mode-hook
;;     '(lambda () (define-abbrev php-mode-abbrev-table "ex" "extends")))
</span>
<span class="comment">;; To make php-mode compatible with html-mode, see http://php-mode.sf.net
</span>
<span class="comment">;; Many options available under Help:Customize
;; Options specific to php-mode are in
;;  Programming/Languages/Php
;; Since it inherits much functionality from c-mode, look there too
;;  Programming/Languages/C
</span>
<span class="comment">;;; Commentary:
</span>
<span class="comment">;; PHP mode is a major mode for editing PHP 3 and 4 source code.  It's
;; an extension of C mode; thus it inherits all C mode's navigation
;; functionality.  But it colors according to the PHP grammar and indents
;; according to the PEAR coding guidelines.  It also includes a couple
;; handy IDE-type features such as documentation search and a source
;; and class browser.
</span>

<span class="comment">;;; Contributors: (in chronological order)
</span>
<span class="comment">;; Juanjo, Torsten Martinsen, Vinai Kopp, Sean Champ, Doug Marcey,
;; Kevin Blake, Rex McMaster, Mathias Meyer, Boris Folgmann, Roland
;; Rosenfeld, Fred Yankowski, Craig Andrews, John Keller, Ryan
;; Sammartino, ppercot, Valentin Funk, Stig Bakken, Gregory Stark,
;; Chris Morris, Nils Rennebarth, Gerrit Riessen, Eric Mc Sween,
;; Ville Skytta, Giacomo Tesio, Lennart Borgman, Stefan Monnier,
;; Aaron S. Hawley, Ian Eure, Bill Lovett
</span>
<span class="comment">;;; Changelog:
</span>
<span class="comment">;; 1.4
;;   Updated GNU GPL to version 3.  Ported to Emacs 22 (CC mode
;;   5.31). M-x php-mode-version shows version.  Provide end-of-defun
;;   beginning-of-defun functionality. Support add-log library.
;;   Fix __CLASS__ constant (Ian Eure).  Allow imenu to see visibility
;;   declarations -- "private", "public", "protected". (Bill Lovett)
;;
;; 1.3
;;   Changed the definition of # using a tip from Stefan
;;   Monnier to correct highlighting and indentation. (Lennart Borgman)
;;   Changed the highlighting of the HTML part. (Lennart Borgman)
;;
;; 1.2
;;   Implemented php-show-arglist, C-. (Engelke Eschner)
;;   Implemented php-complete-function, M-tab (Engelke Eschner)
;;   Re-enabled # comment detection in GNU Emacs (Urban M&#252;ller)
;;   Fixed some keybindings and default settings (Engelke Eschner)
;;
;; 1.1
;;   Added PHP5 support (Giacomo Tesio)
;;     known problem: doesn't highlight after first 'implements'
;;   Better XEmacs compatibility (imenu, regexp, and comments!) (Ville Skytta)
;;   Improvement to php-conditional-key regexp (Eric Mc Sween)
</span>
<span class="comment">;; 1.05
;;   Incorporated speedbar defs by Gerrit Riessen
;;   Add "foreach" to conditional introducing keywords (Nils Rennebarth)
;;   Cleared the Changelog
;;   Moved contribution credits into comments above
</span>

<span class="comment">;;; Code:
</span>
(<span class="keyword">require</span> '<span class="constant">speedbar</span>)
(<span class="keyword">require</span> '<span class="constant">font-lock</span>)
(<span class="keyword">require</span> '<span class="constant">cc-mode</span>)
(<span class="keyword">require</span> '<span class="constant">custom</span>)
(<span class="keyword">require</span> '<span class="constant">etags</span>)
(<span class="keyword">eval-when-compile</span>
  (<span class="keyword">require</span> '<span class="constant">regexp-opt</span>))</pre><hr /><pre>
<span class="comment">;; Local variables
</span>(<span class="keyword">defgroup</span> <span class="type">php</span> nil
  <span class="string">"Major mode `</span><span class="string"><span class="constant">php-mode</span></span><span class="string">' for editing PHP code."</span>
  <span class="builtin">:prefix</span> <span class="string">"php-"</span>
  <span class="builtin">:group</span> 'languages)

(<span class="keyword">defcustom</span> <span class="variable-name">php-default-face</span> 'default
  <span class="string">"Default face in `</span><span class="string"><span class="constant">php-mode</span></span><span class="string">' buffers."</span>
  <span class="builtin">:type</span> 'face
  <span class="builtin">:group</span> 'php)

(<span class="keyword">defcustom</span> <span class="variable-name">php-speedbar-config</span> t
  <span class="string">"When set to true automatically configures Speedbar to observe PHP files.\
Ignores php-file patterns option; fixed to expression \"\\.\\(inc\\|php[s34]?\\)\""</span>
  <span class="builtin">:type</span> 'boolean
  <span class="builtin">:set</span> (<span class="keyword">lambda</span> (sym val)
         (set-default sym val)
         (<span class="keyword">if</span> (and val (boundp 'speedbar))
             (speedbar-add-supported-extension
              <span class="string">"\\.\\(inc\\|php[s34]?\\|phtml\\)"</span>)))
  <span class="builtin">:group</span> 'php)

(<span class="keyword">defcustom</span> <span class="variable-name">php-mode-speedbar-open</span> nil
  <span class="string">"Normally `</span><span class="string"><span class="constant">php-mode</span></span><span class="string">' starts with the speedbar closed.\
Turning this on will open it whenever `</span><span class="string"><span class="constant">php-mode</span></span><span class="string">' is loaded."</span>
  <span class="builtin">:type</span> 'boolean
  <span class="builtin">:set</span> (<span class="keyword">lambda</span> (sym val)
         (set-default sym val)
         (<span class="keyword">when</span> val
             (speedbar 1)))
  <span class="builtin">:group</span> 'php)

(<span class="keyword">defcustom</span> <span class="variable-name">php-manual-url</span> <span class="string">"http://www.php.net/manual/en/"</span>
  <span class="string">"URL at which to find PHP manual.\
You can replace \"en\" with your ISO language code."</span>
  <span class="builtin">:type</span> 'string
  <span class="builtin">:group</span> 'php)

(<span class="keyword">defcustom</span> <span class="variable-name">php-search-url</span> <span class="string">"http://www.php.net/"</span>
  <span class="string">"URL at which to search for documentation on a word"</span>
  <span class="builtin">:type</span> 'string
  <span class="builtin">:group</span> 'php)

(<span class="keyword">defcustom</span> <span class="variable-name">php-completion-file</span> <span class="string">""</span>
  <span class="string">"Path to the file which contains the function names known to PHP"</span>
  <span class="builtin">:type</span> 'string
  <span class="builtin">:group</span> 'php)

(<span class="keyword">defcustom</span> <span class="variable-name">php-manual-path</span> <span class="string">""</span>
  <span class="string">"Path to the directory which contains the PHP manual"</span>
  <span class="builtin">:type</span> 'string
  <span class="builtin">:group</span> 'php)

<span class="comment">;;;###</span><span class="comment"><span class="warning">autoload</span></span><span class="comment">
</span>(<span class="keyword">defcustom</span> <span class="variable-name">php-file-patterns</span> '(<span class="string">"\\.php[s34]?\\'"</span> <span class="string">"\\.phtml\\'"</span> <span class="string">"\\.inc\\'"</span>)
  <span class="string">"List of file patterns for which to automatically invoke `</span><span class="string"><span class="constant">php-mode</span></span><span class="string">'."</span>
  <span class="builtin">:type</span> '(repeat (regexp <span class="builtin">:tag</span> <span class="string">"Pattern"</span>))
  <span class="builtin">:set</span> (<span class="keyword">lambda</span> (sym val)
         (set-default sym val)
         (<span class="keyword">let</span> ((php-file-patterns-temp val))
           (<span class="keyword">while</span> php-file-patterns-temp
             (add-to-list 'auto-mode-alist
                          (cons (car php-file-patterns-temp) 'php-mode))
             (setq php-file-patterns-temp (cdr php-file-patterns-temp)))))
  <span class="builtin">:group</span> 'php)

(<span class="keyword">defcustom</span> <span class="variable-name">php-mode-hook</span> nil
  <span class="string">"List of functions to be executed on entry to `</span><span class="string"><span class="constant">php-mode</span></span><span class="string">'."</span>
  <span class="builtin">:type</span> 'hook
  <span class="builtin">:group</span> 'php)

(<span class="keyword">defcustom</span> <span class="variable-name">php-mode-pear-hook</span> nil
  <span class="string">"Hook called when a PHP PEAR file is opened with `</span><span class="string"><span class="constant">php-mode</span></span><span class="string">'."</span>
  <span class="builtin">:type</span> 'hook
  <span class="builtin">:group</span> 'php)

(<span class="keyword">defcustom</span> <span class="variable-name">php-mode-force-pear</span> nil
  <span class="string">"Normally PEAR coding rules are enforced only when the filename contains \"PEAR\"\
Turning this on will force PEAR rules on all PHP files."</span>
  <span class="builtin">:type</span> 'boolean
  <span class="builtin">:group</span> 'php)</pre><hr /><pre>
(<span class="keyword">eval-when-compile</span>
  (<span class="keyword">defconst</span> <span class="variable-name">php-mode-modified</span>
    (<span class="keyword">save-excursion</span>
      (and
       (re-search-backward <span class="string">"^;; Modified: \\(.*\\)"</span> nil 'noerror)
       (match-string-no-properties 1)))
    <span class="string">"PHP Mode version number."</span>))

(<span class="keyword">defun</span> <span class="function-name">php-mode-version</span> ()
  <span class="string">"Display string describing the version of PHP mode"</span>
  (interactive)
  (message <span class="string">"PHP mode %s of %s"</span>
           php-mode-version-number php-mode-modified))

(<span class="keyword">defconst</span> <span class="variable-name">php-beginning-of-defun-regexp</span>
  <span class="string">"^\\s *function\\s +&amp;?\\(\\(\\sw\\|\\s_\\)+\\)\\s *("</span>
  <span class="string">"Regular expression for a PHP function."</span>)

(<span class="keyword">defun</span> <span class="function-name">php-beginning-of-defun</span> (<span class="type">&amp;optional</span> arg)
  <span class="string">"Move to the beginning of the ARGth PHP function from point.
Implements PHP version of `</span><span class="string"><span class="constant">beginning-of-defun-function</span></span><span class="string">'."</span>
  (interactive <span class="string">"p"</span>)
  (<span class="keyword">let</span> ((arg (or arg 1)))
    (<span class="keyword">while</span> (&gt; arg 0)
      (re-search-backward php-beginning-of-defun-regexp
                          nil 'noerror)
      (setq arg (1- arg)))
    (<span class="keyword">while</span> (&lt; arg 0)
      (end-of-line 1)
      (<span class="keyword">let</span> ((opoint (point)))
        (beginning-of-defun 1)
        (forward-list 2)
        (forward-line 1)
        (<span class="keyword">if</span> (eq opoint (point))
            (re-search-forward php-beginning-of-defun-regexp
                               nil 'noerror))
        (setq arg (1+ arg))))))

(<span class="keyword">defun</span> <span class="function-name">php-end-of-defun</span> (<span class="type">&amp;optional</span> arg)
  <span class="string">"Move the end of the ARGth PHP function from point.
Implements PHP befsion of `</span><span class="string"><span class="constant">end-of-defun-function</span></span><span class="string">'

See `</span><span class="string"><span class="constant">php-beginning-of-defun</span></span><span class="string">'."</span>
  (interactive <span class="string">"p"</span>)
  (php-beginning-of-defun (- (or arg 1))))
</pre><hr /><pre>
(<span class="keyword">defvar</span> <span class="variable-name">php-completion-table</span> nil
  <span class="string">"Obarray of tag names defined in current tags table and functions know to PHP."</span>)

(<span class="keyword">defvar</span> <span class="variable-name">php-warned-bad-indent</span> nil)
(make-variable-buffer-local 'php-warned-bad-indent)

<span class="comment">;; Do it but tell it is not good if html tags in buffer.
</span>(<span class="keyword">defun</span> <span class="function-name">php-check-html-for-indentation</span> ()
  (<span class="keyword">let</span> ((html-tag-re <span class="string">"&lt;/?\\sw+.*?&gt;"</span>)
        (here (point)))
    (<span class="keyword">if</span> (not (or (re-search-forward html-tag-re (line-end-position) t)
                 (re-search-backward html-tag-re (line-beginning-position) t)))
        t
      (goto-char here)
      (setq php-warned-bad-indent t)
      (lwarn 'php-indent <span class="builtin">:warning</span>
             <span class="string">"\n\t%s\n\t%s\n\t%s\n"</span>
             <span class="string">"Indentation fails badly with mixed HTML and PHP."</span>
             <span class="string">"Look for an Emacs Lisp library that supports \"multiple"</span>
             <span class="string">"major modes\" like mumamo, mmm-mode or multi-mode."</span>)
      nil)))

(<span class="keyword">defun</span> <span class="function-name">php-cautious-indent-region</span> (start end <span class="type">&amp;optional</span> quiet)
  (<span class="keyword">if</span> (or php-warned-bad-indent
          (php-check-html-for-indentation))
      (funcall 'c-indent-region start end quiet)))

(<span class="keyword">defun</span> <span class="function-name">php-cautious-indent-line</span> ()
  (<span class="keyword">if</span> (or php-warned-bad-indent
          (php-check-html-for-indentation))
      (funcall 'c-indent-line)))

<span class="comment">;;;###</span><span class="comment"><span class="warning">autoload</span></span><span class="comment">
</span>(<span class="keyword">define-derived-mode</span> <span class="function-name">php-mode</span> c-mode <span class="string">"PHP"</span>
  <span class="string">"Major mode for editing PHP code.\n\n\\{php-mode-map}"</span>
<span class="comment">;;   (c-add-language 'php-mode 'c-mode)
</span>
<span class="comment">;;   (c-lang-defconst c-block-stmt-1-kwds
;;     php php-block-stmt-1-kwds)
</span>  (set (make-local-variable 'c-block-stmt-1-key) php-block-stmt-1-key)

<span class="comment">;;   (c-lang-defconst c-block-stmt-2-kwds
;;     php php-block-stmt-2-kwds)
</span>  (set (make-local-variable 'c-block-stmt-2-key) php-block-stmt-2-key)
  <span class="comment">;; Specify that cc-mode recognize Javadoc comment style
</span>  (set (make-local-variable 'c-doc-comment-style)
    '((php-mode . javadoc)))

<span class="comment">;;   (c-lang-defconst c-class-decl-kwds
;;     php php-class-decl-kwds)
</span>  (set (make-local-variable 'c-class-key) php-class-key)

  (<span class="keyword">defvar</span> <span class="variable-name">php-mode-syntax-table</span> php-mode-syntax-table)
  <span class="comment">;; this line makes $ into punctuation instead of a word constituent
</span>  <span class="comment">;; it used to be active, but it killed indenting of case lines that
</span>  <span class="comment">;; begin with '$' (many do).  If anyone has a solution to this
</span>  <span class="comment">;; problem, please let me know.  Of course, you're welcome to
</span>  <span class="comment">;; uncomment this line in your installation.
;  (modify-syntax-entry ?$ "." php-mode-syntax-table)
</span>
  <span class="comment">;; The above causes XEmacs to handle shell-style comments correctly,
</span>  <span class="comment">;; but fails to work in GNU Emacs which fails to interpret \n as the
</span>  <span class="comment">;; end of the comment.
</span>  (<span class="keyword">if</span> (<span class="keyword">featurep</span> '<span class="constant">xemacs</span>) (<span class="keyword">progn</span>
                (modify-syntax-entry ?# <span class="string">"&lt; b"</span> php-mode-syntax-table)
                (modify-syntax-entry ?\n <span class="string">"&gt; b"</span> php-mode-syntax-table)))

  (make-local-variable 'font-lock-defaults)
  (setq font-lock-defaults
        '((php-font-lock-keywords-1
           php-font-lock-keywords-2
           <span class="comment">;; Comment-out the next line if the font-coloring is too
</span>           <span class="comment">;; extreme/ugly for you.
</span>           php-font-lock-keywords-3)
          nil                               <span class="comment">; KEYWORDS-ONLY
</span>          t                                 <span class="comment">; CASE-FOLD
</span>          nil                               <span class="comment">; SYNTAX-ALIST
</span>          nil))                             <span class="comment">; SYNTAX-BEGIN
</span>  (modify-syntax-entry ?# <span class="string">"&lt; b"</span> php-mode-syntax-table)

  <span class="comment">;; Electric behaviour must be turned off, they do not work since
</span>  <span class="comment">;; they can not find the correct syntax in embedded PHP.
</span>  <span class="comment">;;
</span>  <span class="comment">;; Seems to work with narrowing so let it be on if the user prefers it.
</span>  <span class="comment">;;(setq c-electric-flag nil)
</span>
  (setq font-lock-maximum-decoration t
        case-fold-search t              <span class="comment">; PHP vars are case-sensitive
</span>        imenu-generic-expression php-imenu-generic-expression)

  <span class="comment">;; Do not force newline at end of file.  Such newlines can cause
</span>  <span class="comment">;; trouble if the PHP file is included in another file before calls
</span>  <span class="comment">;; to header() or cookie().
</span>  (set (make-local-variable 'require-final-newline) nil)
  (set (make-local-variable 'next-line-add-newlines) nil)

  <span class="comment">;; PEAR coding standards
</span>  (add-hook 'php-mode-pear-hook
            (<span class="keyword">lambda</span> ()
              (set (make-local-variable 'tab-width) 4)
              (set (make-local-variable 'c-basic-offset) 4)
              (set (make-local-variable 'indent-tabs-mode) nil)
              (c-set-offset 'block-open' - )
              (c-set-offset 'block-close' 0 )) nil t)

  (<span class="keyword">if</span> (or php-mode-force-pear
          (and (stringp buffer-file-name)
               (string-match <span class="string">"PEAR\\|pear"</span>
                             (buffer-file-name))
               (string-match <span class="string">"\\.php$"</span> (buffer-file-name))))
      (run-hooks 'php-mode-pear-hook))

  (setq indent-line-function 'php-cautious-indent-line)
  (setq indent-region-function 'php-cautious-indent-region)
  (setq c-special-indent-hook nil)

  (set (make-local-variable 'beginning-of-defun-function)
       'php-beginning-of-defun)
  (set (make-local-variable 'end-of-defun-function)
       'php-end-of-defun)
  (set (make-local-variable 'open-paren-in-column-0-is-defun-start)
       nil)
  (set (make-local-variable 'defun-prompt-regexp)
       <span class="string">"^\\s *function\\s +&amp;?\\(\\(\\sw\\|\\s_\\)+\\)\\s *"</span>)
  (set (make-local-variable 'add-log-current-defun-header-regexp)
       php-beginning-of-defun-regexp)

  (run-hooks 'php-mode-hook))</pre><hr /><pre>
<span class="comment">;; Make a menu keymap (with a prompt string)
;; and make it the menu bar item's definition.
</span>(define-key php-mode-map [menu-bar] (make-sparse-keymap))
(define-key php-mode-map [menu-bar php]
  (cons <span class="string">"PHP"</span> (make-sparse-keymap <span class="string">"PHP"</span>)))

<span class="comment">;; Define specific subcommands in this menu.
</span>(define-key php-mode-map [menu-bar php complete-function]
  '(<span class="string">"Complete function name"</span> . php-complete-function))
(define-key php-mode-map
  [menu-bar php browse-manual]
  '(<span class="string">"Browse manual"</span> . php-browse-manual))
(define-key php-mode-map
  [menu-bar php search-documentation]
  '(<span class="string">"Search documentation"</span> . php-search-documentation))</pre><hr /><pre>
<span class="comment">;; Define function name completion function
</span>(<span class="keyword">defun</span> <span class="function-name">php-complete-function</span> ()
  <span class="string">"Perform function completion on the text around point.
Completes to the set of names listed in the current tags table
and the standard php functions.
The string to complete is chosen in the same way as the default
for \\[</span><span class="string"><span class="constant">find-tag</span></span><span class="string">] (which see)."</span>
  (interactive)
  (<span class="keyword">let</span> ((pattern (php-get-pattern))
        beg
        completion
        (php-functions (php-completion-table)))
    (<span class="keyword">if</span> (not pattern) (message <span class="string">"Nothing to complete"</span>)
        (search-backward pattern)
        (setq beg (point))
        (forward-char (length pattern))
        (setq completion (try-completion pattern php-functions nil))
        (<span class="keyword">cond</span> ((eq completion t))
              ((null completion)
               (message <span class="string">"Can't find completion for \"%s\""</span> pattern)
               (ding))
              ((not (string= pattern completion))
               (delete-region beg (point))
               (insert completion))
              (t
               (message <span class="string">"Making completion list..."</span>)
               (<span class="keyword">with-output-to-temp-buffer</span> <span class="string">"*Completions*"</span>
                 (display-completion-list
                  (all-completions pattern php-functions)))
               (message <span class="string">"Making completion list...%s"</span> <span class="string">"done"</span>))))))

<span class="comment">;; Build php-completion-table on demand.  The table includes the
;; PHP functions and the tags from the current tags-file-name
</span>(<span class="keyword">defun</span> <span class="function-name">php-completion-table</span> ()
  (or (and tags-file-name
           (<span class="keyword">save-excursion</span> (tags-verify-table tags-file-name))
           php-completion-table)
      (<span class="keyword">let</span> ((tags-table
             (<span class="keyword">if</span> (and tags-file-name
                      (functionp 'etags-tags-completion-table))
                 (<span class="keyword">with-current-buffer</span> (get-file-buffer tags-file-name)
                   (etags-tags-completion-table))
               nil))
            (php-table
             (<span class="keyword">cond</span> ((and (not (string= <span class="string">""</span> php-completion-file))
                         (file-readable-p php-completion-file))
                    (php-build-table-from-file php-completion-file))
                   (php-manual-path
                    (php-build-table-from-path php-manual-path))
                   (t nil))))
        (<span class="keyword">unless</span> (or php-table tags-table)
          (<span class="warning">error</span>
           (concat <span class="string">"No TAGS file active nor are "</span>
                   <span class="string">"`</span><span class="string"><span class="constant">php-completion-file</span></span><span class="string">' or `</span><span class="string"><span class="constant">php-manual-path</span></span><span class="string">' set"</span>)))
        (<span class="keyword">when</span> tags-table
          <span class="comment">;; Combine the tables.
</span>          (mapatoms (<span class="keyword">lambda</span> (sym) (intern (symbol-name sym) php-table))
                    tags-table))
        (setq php-completion-table php-table))))

(<span class="keyword">defun</span> <span class="function-name">php-build-table-from-file</span> (filename)
  (<span class="keyword">let</span> ((table (make-vector 1022 0))
        (buf (find-file-noselect filename)))
    (<span class="keyword">save-excursion</span>
      (set-buffer buf)
      (goto-char (point-min))
      (<span class="keyword">while</span> (re-search-forward
              <span class="string">"^\\([-a-zA-Z0-9_.]+\\)\n"</span>
              nil t)
        (intern (buffer-substring (match-beginning 1) (match-end 1))
                table)))
    (kill-buffer buf)
    table))

(<span class="keyword">defun</span> <span class="function-name">php-build-table-from-path</span> (path)
  (<span class="keyword">let</span> ((table (make-vector 1022 0))
        (files (directory-files
                path
                nil
                <span class="string">"^function\\..+\\.html$"</span>)))
    (mapc (<span class="keyword">lambda</span> (file)
            (string-match <span class="string">"\\.\\([-a-zA-Z_0-9]+\\)\\.html$"</span> file)
            (intern
             (replace-regexp-in-string
              <span class="string">"-"</span> <span class="string">"_"</span> (substring file (match-beginning 1) (match-end 1)) t)
             table))
          files)
    table))

<span class="comment">;; Find the pattern we want to complete
;; find-tag-default from GNU Emacs etags.el
</span>(<span class="keyword">defun</span> <span class="function-name">php-get-pattern</span> ()
  (<span class="keyword">save-excursion</span>
    (<span class="keyword">while</span> (looking-at <span class="string">"\\sw\\|\\s_"</span>)
      (forward-char 1))
    (<span class="keyword">if</span> (or (re-search-backward <span class="string">"\\sw\\|\\s_"</span>
                                (<span class="keyword">save-excursion</span> (beginning-of-line) (point))
                                t)
            (re-search-forward <span class="string">"\\(\\sw\\|\\s_\\)+"</span>
                               (<span class="keyword">save-excursion</span> (end-of-line) (point))
                               t))
        (<span class="keyword">progn</span> (goto-char (match-end 0))
               (buffer-substring-no-properties
                (point)
                (<span class="keyword">progn</span> (forward-sexp -1)
                       (<span class="keyword">while</span> (looking-at <span class="string">"\\s'"</span>)
                         (forward-char 1))
                       (point))))
      nil)))


(<span class="keyword">defun</span> <span class="function-name">php-show-arglist</span> ()
  (interactive)
  (<span class="keyword">let*</span> ((tagname (php-get-pattern))
         (buf (find-tag-noselect tagname nil nil))
         arglist)
    (<span class="keyword">save-excursion</span>
      (set-buffer buf)
      (goto-char (point-min))
      (<span class="keyword">when</span> (re-search-forward
             (format <span class="string">"function[ \t]+%s[ \t]*(\\([^{]*\\))"</span> tagname)
             nil t)
        (setq arglist (buffer-substring-no-properties
                       (match-beginning 1) (match-end 1)))))
    (<span class="keyword">if</span> arglist
        (message <span class="string">"Arglist for %s: %s"</span> tagname arglist)
        (message <span class="string">"unknown function: %s"</span> tagname))))</pre><hr /><pre>
<span class="comment">;; Define function documentation function
</span>(<span class="keyword">defun</span> <span class="function-name">php-search-documentation</span> ()
  <span class="string">"Search PHP documentation for the word at the point."</span>
  (interactive)
  (browse-url (concat php-search-url (current-word t))))

<span class="comment">;; Define function for browsing manual
</span>(<span class="keyword">defun</span> <span class="function-name">php-browse-manual</span> ()
  <span class="string">"Bring up manual for PHP."</span>
  (interactive)
  (browse-url php-manual-url))

<span class="comment">;; Define shortcut
</span>(define-key php-mode-map
  <span class="string">"\C-c\C-f"</span>
  'php-search-documentation)

<span class="comment">;; Define shortcut
</span>(define-key php-mode-map
  [(meta tab)]
  'php-complete-function)

<span class="comment">;; Define shortcut
</span>(define-key php-mode-map
  <span class="string">"\C-c\C-m"</span>
  'php-browse-manual)

<span class="comment">;; Define shortcut
</span>(define-key php-mode-map
  '[(control .)]
  'php-show-arglist)</pre><hr /><pre>
(<span class="keyword">defconst</span> <span class="variable-name">php-constants</span>
  (<span class="keyword">eval-when-compile</span>
    (regexp-opt
     '(<span class="comment">;; core constants
</span>       <span class="string">"__LINE__"</span> <span class="string">"__FILE__"</span>
       <span class="string">"__FUNCTION__"</span> <span class="string">"__CLASS__"</span> <span class="string">"__METHOD__"</span>
       <span class="string">"PHP_OS"</span> <span class="string">"PHP_VERSION"</span>
       <span class="string">"TRUE"</span> <span class="string">"FALSE"</span> <span class="string">"NULL"</span>
       <span class="string">"E_ERROR"</span> <span class="string">"E_NOTICE"</span> <span class="string">"E_PARSE"</span> <span class="string">"E_WARNING"</span> <span class="string">"E_ALL"</span> <span class="string">"E_STRICT"</span>
       <span class="string">"E_USER_ERROR"</span> <span class="string">"E_USER_WARNING"</span> <span class="string">"E_USER_NOTICE"</span>
       <span class="string">"DEFAULT_INCLUDE_PATH"</span> <span class="string">"PEAR_INSTALL_DIR"</span> <span class="string">"PEAR_EXTENSION_DIR"</span>
       <span class="string">"PHP_BINDIR"</span> <span class="string">"PHP_LIBDIR"</span> <span class="string">"PHP_DATADIR"</span> <span class="string">"PHP_SYSCONFDIR"</span>
       <span class="string">"PHP_LOCALSTATEDIR"</span> <span class="string">"PHP_CONFIG_FILE_PATH"</span>
       <span class="string">"PHP_EOL"</span>

       <span class="comment">;; from ext/standard:
</span>       <span class="string">"EXTR_OVERWRITE"</span> <span class="string">"EXTR_SKIP"</span> <span class="string">"EXTR_PREFIX_SAME"</span>
       <span class="string">"EXTR_PREFIX_ALL"</span> <span class="string">"EXTR_PREFIX_INVALID"</span> <span class="string">"SORT_ASC"</span> <span class="string">"SORT_DESC"</span>
       <span class="string">"SORT_REGULAR"</span> <span class="string">"SORT_NUMERIC"</span> <span class="string">"SORT_STRING"</span> <span class="string">"ASSERT_ACTIVE"</span>
       <span class="string">"ASSERT_CALLBACK"</span> <span class="string">"ASSERT_BAIL"</span> <span class="string">"ASSERT_WARNING"</span>
       <span class="string">"ASSERT_QUIET_EVAL"</span> <span class="string">"CONNECTION_ABORTED"</span> <span class="string">"CONNECTION_NORMAL"</span>
       <span class="string">"CONNECTION_TIMEOUT"</span> <span class="string">"M_E"</span> <span class="string">"M_LOG2E"</span> <span class="string">"M_LOG10E"</span> <span class="string">"M_LN2"</span>
       <span class="string">"M_LN10"</span> <span class="string">"M_PI"</span> <span class="string">"M_PI_2"</span> <span class="string">"M_PI_4"</span> <span class="string">"M_1_PI"</span> <span class="string">"M_2_PI"</span>
       <span class="string">"M_2_SQRTPI"</span> <span class="string">"M_SQRT2"</span> <span class="string">"M_SQRT1_2"</span> <span class="string">"CRYPT_SALT_LENGTH"</span>
       <span class="string">"CRYPT_STD_DES"</span> <span class="string">"CRYPT_EXT_DES"</span> <span class="string">"CRYPT_MD5"</span> <span class="string">"CRYPT_BLOWFISH"</span>
       <span class="string">"DIRECTORY_SEPARATOR"</span> <span class="string">"SEEK_SET"</span> <span class="string">"SEEK_CUR"</span> <span class="string">"SEEK_END"</span>
       <span class="string">"LOCK_SH"</span> <span class="string">"LOCK_EX"</span> <span class="string">"LOCK_UN"</span> <span class="string">"LOCK_NB"</span> <span class="string">"HTML_SPECIALCHARS"</span>
       <span class="string">"HTML_ENTITIES"</span> <span class="string">"ENT_COMPAT"</span> <span class="string">"ENT_QUOTES"</span> <span class="string">"ENT_NOQUOTES"</span>
       <span class="string">"INFO_GENERAL"</span> <span class="string">"INFO_CREDITS"</span> <span class="string">"INFO_CONFIGURATION"</span>
       <span class="string">"INFO_ENVIRONMENT"</span> <span class="string">"INFO_VARIABLES"</span> <span class="string">"INFO_LICENSE"</span> <span class="string">"INFO_ALL"</span>
       <span class="string">"CREDITS_GROUP"</span> <span class="string">"CREDITS_GENERAL"</span> <span class="string">"CREDITS_SAPI"</span>
       <span class="string">"CREDITS_MODULES"</span> <span class="string">"CREDITS_DOCS"</span> <span class="string">"CREDITS_FULLPAGE"</span>
       <span class="string">"CREDITS_QA"</span> <span class="string">"CREDITS_ALL"</span> <span class="string">"PHP_OUTPUT_HANDLER_START"</span>
       <span class="string">"PHP_OUTPUT_HANDLER_CONT"</span> <span class="string">"PHP_OUTPUT_HANDLER_END"</span>
       <span class="string">"STR_PAD_LEFT"</span> <span class="string">"STR_PAD_RIGHT"</span> <span class="string">"STR_PAD_BOTH"</span>
       <span class="string">"PATHINFO_DIRNAME"</span> <span class="string">"PATHINFO_BASENAME"</span> <span class="string">"PATHINFO_EXTENSION"</span>
       <span class="string">"CHAR_MAX"</span> <span class="string">"LC_CTYPE"</span> <span class="string">"LC_NUMERIC"</span> <span class="string">"LC_TIME"</span> <span class="string">"LC_COLLATE"</span>
       <span class="string">"LC_MONETARY"</span> <span class="string">"LC_ALL"</span> <span class="string">"LC_MESSAGES"</span> <span class="string">"LOG_EMERG"</span> <span class="string">"LOG_ALERT"</span>
       <span class="string">"LOG_CRIT"</span> <span class="string">"LOG_ERR"</span> <span class="string">"LOG_WARNING"</span> <span class="string">"LOG_NOTICE"</span> <span class="string">"LOG_INFO"</span>
       <span class="string">"LOG_DEBUG"</span> <span class="string">"LOG_KERN"</span> <span class="string">"LOG_USER"</span> <span class="string">"LOG_MAIL"</span> <span class="string">"LOG_DAEMON"</span>
       <span class="string">"LOG_AUTH"</span> <span class="string">"LOG_SYSLOG"</span> <span class="string">"LOG_LPR"</span> <span class="string">"LOG_NEWS"</span> <span class="string">"LOG_UUCP"</span>
       <span class="string">"LOG_CRON"</span> <span class="string">"LOG_AUTHPRIV"</span> <span class="string">"LOG_LOCAL0"</span> <span class="string">"LOG_LOCAL1"</span>
       <span class="string">"LOG_LOCAL2"</span> <span class="string">"LOG_LOCAL3"</span> <span class="string">"LOG_LOCAL4"</span> <span class="string">"LOG_LOCAL5"</span>
       <span class="string">"LOG_LOCAL6"</span> <span class="string">"LOG_LOCAL7"</span> <span class="string">"LOG_PID"</span> <span class="string">"LOG_CONS"</span> <span class="string">"LOG_ODELAY"</span>
       <span class="string">"LOG_NDELAY"</span> <span class="string">"LOG_NOWAIT"</span> <span class="string">"LOG_PERROR"</span>

       <span class="comment">;; Disabled by default because they slow buffer loading
</span>       <span class="comment">;; If you have use for them, uncomment the strings
</span>       <span class="comment">;; that you want colored.
</span>       <span class="comment">;; To compile, you may have to increase 'max-specpdl-size'
</span>
       <span class="comment">;; from other bundled extensions:
;        "CAL_EASTER_TO_xxx" "VT_NULL" "VT_EMPTY" "VT_UI1" "VT_I2"
;        "VT_I4" "VT_R4" "VT_R8" "VT_BOOL" "VT_ERROR" "VT_CY" "VT_DATE"
;        "VT_BSTR" "VT_DECIMAL" "VT_UNKNOWN" "VT_DISPATCH" "VT_VARIANT"
;        "VT_I1" "VT_UI2" "VT_UI4" "VT_INT" "VT_UINT" "VT_ARRAY"
;        "VT_BYREF" "CP_ACP" "CP_MACCP" "CP_OEMCP" "CP_SYMBOL"
;        "CP_THREAD_ACP" "CP_UTF7" "CP_UTF8" "CPDF_PM_NONE"
;        "CPDF_PM_OUTLINES" "CPDF_PM_THUMBS" "CPDF_PM_FULLSCREEN"
;        "CPDF_PL_SINGLE" "CPDF_PL_1COLUMN" "CPDF_PL_2LCOLUMN"
;        "CPDF_PL_2RCOLUMN" "CURLOPT_PORT" "CURLOPT_FILE"
;        "CURLOPT_INFILE" "CURLOPT_INFILESIZE" "CURLOPT_URL"
;        "CURLOPT_PROXY" "CURLOPT_VERBOSE" "CURLOPT_HEADER"
;        "CURLOPT_HTTPHEADER" "CURLOPT_NOPROGRESS" "CURLOPT_NOBODY"
;        "CURLOPT_FAILONERROR" "CURLOPT_UPLOAD" "CURLOPT_POST"
;        "CURLOPT_FTPLISTONLY" "CURLOPT_FTPAPPEND" "CURLOPT_NETRC"
;        "CURLOPT_FOLLOWLOCATION" "CURLOPT_FTPASCII" "CURLOPT_PUT"
;        "CURLOPT_MUTE" "CURLOPT_USERPWD" "CURLOPT_PROXYUSERPWD"
;        "CURLOPT_RANGE" "CURLOPT_TIMEOUT" "CURLOPT_POSTFIELDS"
;        "CURLOPT_REFERER" "CURLOPT_USERAGENT" "CURLOPT_FTPPORT"
;        "CURLOPT_LOW_SPEED_LIMIT" "CURLOPT_LOW_SPEED_TIME"
;        "CURLOPT_RESUME_FROM" "CURLOPT_COOKIE" "CURLOPT_SSLCERT"
;        "CURLOPT_SSLCERTPASSWD" "CURLOPT_WRITEHEADER"
;        "CURLOPT_COOKIEFILE" "CURLOPT_SSLVERSION"
;        "CURLOPT_TIMECONDITION" "CURLOPT_TIMEVALUE"
;        "CURLOPT_CUSTOMREQUEST" "CURLOPT_STDERR" "CURLOPT_TRANSFERTEXT"
;        "CURLOPT_RETURNTRANSFER" "CURLOPT_QUOTE" "CURLOPT_POSTQUOTE"
;        "CURLOPT_INTERFACE" "CURLOPT_KRB4LEVEL"
;        "CURLOPT_HTTPPROXYTUNNEL" "CURLOPT_FILETIME"
;        "CURLOPT_WRITEFUNCTION" "CURLOPT_READFUNCTION"
;        "CURLOPT_PASSWDFUNCTION" "CURLOPT_HEADERFUNCTION"
;        "CURLOPT_MAXREDIRS" "CURLOPT_MAXCONNECTS" "CURLOPT_CLOSEPOLICY"
;        "CURLOPT_FRESH_CONNECT" "CURLOPT_FORBID_REUSE"
;        "CURLOPT_RANDOM_FILE" "CURLOPT_EGDSOCKET"
;        "CURLOPT_CONNECTTIMEOUT" "CURLOPT_SSL_VERIFYPEER"
;        "CURLOPT_CAINFO" "CURLOPT_BINARYTRANSER"
;        "CURLCLOSEPOLICY_LEAST_RECENTLY_USED" "CURLCLOSEPOLICY_OLDEST"
;        "CURLINFO_EFFECTIVE_URL" "CURLINFO_HTTP_CODE"
;        "CURLINFO_HEADER_SIZE" "CURLINFO_REQUEST_SIZE"
;        "CURLINFO_TOTAL_TIME" "CURLINFO_NAMELOOKUP_TIME"
;        "CURLINFO_CONNECT_TIME" "CURLINFO_PRETRANSFER_TIME"
;        "CURLINFO_SIZE_UPLOAD" "CURLINFO_SIZE_DOWNLOAD"
;        "CURLINFO_SPEED_DOWNLOAD" "CURLINFO_SPEED_UPLOAD"
;        "CURLINFO_FILETIME" "CURLE_OK" "CURLE_UNSUPPORTED_PROTOCOL"
;        "CURLE_FAILED_INIT" "CURLE_URL_MALFORMAT"
;        "CURLE_URL_MALFORMAT_USER" "CURLE_COULDNT_RESOLVE_PROXY"
;        "CURLE_COULDNT_RESOLVE_HOST" "CURLE_COULDNT_CONNECT"
;        "CURLE_FTP_WEIRD_SERVER_REPLY" "CURLE_FTP_ACCESS_DENIED"
;        "CURLE_FTP_USER_PASSWORD_INCORRECT"
;        "CURLE_FTP_WEIRD_PASS_REPLY" "CURLE_FTP_WEIRD_USER_REPLY"
;        "CURLE_FTP_WEIRD_PASV_REPLY" "CURLE_FTP_WEIRD_227_FORMAT"
;        "CURLE_FTP_CANT_GET_HOST" "CURLE_FTP_CANT_RECONNECT"
;        "CURLE_FTP_COULDNT_SET_BINARY" "CURLE_PARTIAL_FILE"
;        "CURLE_FTP_COULDNT_RETR_FILE" "CURLE_FTP_WRITE_ERROR"
;        "CURLE_FTP_QUOTE_ERROR" "CURLE_HTTP_NOT_FOUND"
;        "CURLE_WRITE_ERROR" "CURLE_MALFORMAT_USER"
;        "CURLE_FTP_COULDNT_STOR_FILE" "CURLE_READ_ERROR"
;        "CURLE_OUT_OF_MEMORY" "CURLE_OPERATION_TIMEOUTED"
;        "CURLE_FTP_COULDNT_SET_ASCII" "CURLE_FTP_PORT_FAILED"
;        "CURLE_FTP_COULDNT_USE_REST" "CURLE_FTP_COULDNT_GET_SIZE"
;        "CURLE_HTTP_RANGE_ERROR" "CURLE_HTTP_POST_ERROR"
;        "CURLE_SSL_CONNECT_ERROR" "CURLE_FTP_BAD_DOWNLOAD_RESUME"
;        "CURLE_FILE_COULDNT_READ_FILE" "CURLE_LDAP_CANNOT_BIND"
;        "CURLE_LDAP_SEARCH_FAILED" "CURLE_LIBRARY_NOT_FOUND"
;        "CURLE_FUNCTION_NOT_FOUND" "CURLE_ABORTED_BY_CALLBACK"
;        "CURLE_BAD_FUNCTION_ARGUMENT" "CURLE_BAD_CALLING_ORDER"
;        "CURLE_HTTP_PORT_FAILED" "CURLE_BAD_PASSWORD_ENTERED"
;        "CURLE_TOO_MANY_REDIRECTS" "CURLE_UNKOWN_TELNET_OPTION"
;        "CURLE_TELNET_OPTION_SYNTAX" "CURLE_ALREADY_COMPLETE"
;        "DBX_MYSQL" "DBX_ODBC" "DBX_PGSQL" "DBX_MSSQL" "DBX_PERSISTENT"
;        "DBX_RESULT_INFO" "DBX_RESULT_INDEX" "DBX_RESULT_ASSOC"
;        "DBX_CMP_TEXT" "DBX_CMP_NUMBER" "XML_ELEMENT_NODE"
;        "XML_ATTRIBUTE_NODE" "XML_TEXT_NODE" "XML_CDATA_SECTION_NODE"
;        "XML_ENTITY_REF_NODE" "XML_ENTITY_NODE" "XML_PI_NODE"
;        "XML_COMMENT_NODE" "XML_DOCUMENT_NODE" "XML_DOCUMENT_TYPE_NODE"
;        "XML_DOCUMENT_FRAG_NODE" "XML_NOTATION_NODE"
;        "XML_HTML_DOCUMENT_NODE" "XML_DTD_NODE" "XML_ELEMENT_DECL_NODE"
;        "XML_ATTRIBUTE_DECL_NODE" "XML_ENTITY_DECL_NODE"
;        "XML_NAMESPACE_DECL_NODE" "XML_GLOBAL_NAMESPACE"
;        "XML_LOCAL_NAMESPACE" "XML_ATTRIBUTE_CDATA" "XML_ATTRIBUTE_ID"
;        "XML_ATTRIBUTE_IDREF" "XML_ATTRIBUTE_IDREFS"
;        "XML_ATTRIBUTE_ENTITY" "XML_ATTRIBUTE_NMTOKEN"
;        "XML_ATTRIBUTE_NMTOKENS" "XML_ATTRIBUTE_ENUMERATION"
;        "XML_ATTRIBUTE_NOTATION" "XPATH_UNDEFINED" "XPATH_NODESET"
;        "XPATH_BOOLEAN" "XPATH_NUMBER" "XPATH_STRING" "XPATH_POINT"
;        "XPATH_RANGE" "XPATH_LOCATIONSET" "XPATH_USERS" "FBSQL_ASSOC"
;        "FBSQL_NUM" "FBSQL_BOTH" "FDFValue" "FDFStatus" "FDFFile"
;        "FDFID" "FDFFf" "FDFSetFf" "FDFClearFf" "FDFFlags" "FDFSetF"
;        "FDFClrF" "FDFAP" "FDFAS" "FDFAction" "FDFAA" "FDFAPRef"
;        "FDFIF" "FDFEnter" "FDFExit" "FDFDown" "FDFUp" "FDFFormat"
;        "FDFValidate" "FDFKeystroke" "FDFCalculate"
;        "FRIBIDI_CHARSET_UTF8" "FRIBIDI_CHARSET_8859_6"
;        "FRIBIDI_CHARSET_8859_8" "FRIBIDI_CHARSET_CP1255"
;        "FRIBIDI_CHARSET_CP1256" "FRIBIDI_CHARSET_ISIRI_3342"
;        "FTP_ASCII" "FTP_BINARY" "FTP_IMAGE" "FTP_TEXT" "IMG_GIF"
;        "IMG_JPG" "IMG_JPEG" "IMG_PNG" "IMG_WBMP" "IMG_COLOR_TILED"
;        "IMG_COLOR_STYLED" "IMG_COLOR_BRUSHED"
;        "IMG_COLOR_STYLEDBRUSHED" "IMG_COLOR_TRANSPARENT"
;        "IMG_ARC_ROUNDED" "IMG_ARC_PIE" "IMG_ARC_CHORD"
;        "IMG_ARC_NOFILL" "IMG_ARC_EDGED" "GMP_ROUND_ZERO"
;        "GMP_ROUND_PLUSINF" "GMP_ROUND_MINUSINF" "HW_ATTR_LANG"
;        "HW_ATTR_NR" "HW_ATTR_NONE" "IIS_READ" "IIS_WRITE"
;        "IIS_EXECUTE" "IIS_SCRIPT" "IIS_ANONYMOUS" "IIS_BASIC"
;        "IIS_NTLM" "NIL" "OP_DEBUG" "OP_READONLY" "OP_ANONYMOUS"
;        "OP_SHORTCACHE" "OP_SILENT" "OP_PROTOTYPE" "OP_HALFOPEN"
;        "OP_EXPUNGE" "OP_SECURE" "CL_EXPUNGE" "FT_UID" "FT_PEEK"
;        "FT_NOT" "FT_INTERNAL" "FT_PREFETCHTEXT" "ST_UID" "ST_SILENT"
;        "ST_SET" "CP_UID" "CP_MOVE" "SE_UID" "SE_FREE" "SE_NOPREFETCH"
;        "SO_FREE" "SO_NOSERVER" "SA_MESSAGES" "SA_RECENT" "SA_UNSEEN"
;        "SA_UIDNEXT" "SA_UIDVALIDITY" "SA_ALL" "LATT_NOINFERIORS"
;        "LATT_NOSELECT" "LATT_MARKED" "LATT_UNMARKED" "SORTDATE"
;        "SORTARRIVAL" "SORTFROM" "SORTSUBJECT" "SORTTO" "SORTCC"
;        "SORTSIZE" "TYPETEXT" "TYPEMULTIPART" "TYPEMESSAGE"
;        "TYPEAPPLICATION" "TYPEAUDIO" "TYPEIMAGE" "TYPEVIDEO"
;        "TYPEOTHER" "ENC7BIT" "ENC8BIT" "ENCBINARY" "ENCBASE64"
;        "ENCQUOTEDPRINTABLE" "ENCOTHER" "INGRES_ASSOC" "INGRES_NUM"
;        "INGRES_BOTH" "IBASE_DEFAULT" "IBASE_TEXT" "IBASE_UNIXTIME"
;        "IBASE_READ" "IBASE_COMMITTED" "IBASE_CONSISTENCY"
;        "IBASE_NOWAIT" "IBASE_TIMESTAMP" "IBASE_DATE" "IBASE_TIME"
;        "LDAP_DEREF_NEVER" "LDAP_DEREF_SEARCHING" "LDAP_DEREF_FINDING"
;        "LDAP_DEREF_ALWAYS" "LDAP_OPT_DEREF" "LDAP_OPT_SIZELIMIT"
;        "LDAP_OPT_TIMELIMIT" "LDAP_OPT_PROTOCOL_VERSION"
;        "LDAP_OPT_ERROR_NUMBER" "LDAP_OPT_REFERRALS" "LDAP_OPT_RESTART"
;        "LDAP_OPT_HOST_NAME" "LDAP_OPT_ERROR_STRING"
;        "LDAP_OPT_MATCHED_DN" "LDAP_OPT_SERVER_CONTROLS"
;        "LDAP_OPT_CLIENT_CONTROLS" "GSLC_SSL_NO_AUTH"
;        "GSLC_SSL_ONEWAY_AUTH" "GSLC_SSL_TWOWAY_AUTH" "MCAL_SUNDAY"
;        "MCAL_MONDAY" "MCAL_TUESDAY" "MCAL_WEDNESDAY" "MCAL_THURSDAY"
;        "MCAL_FRIDAY" "MCAL_SATURDAY" "MCAL_JANUARY" "MCAL_FEBRUARY"
;        "MCAL_MARCH" "MCAL_APRIL" "MCAL_MAY" "MCAL_JUNE" "MCAL_JULY"
;        "MCAL_AUGUST" "MCAL_SEPTEMBER" "MCAL_OCTOBER" "MCAL_NOVEMBER"
;        "MCAL_RECUR_NONE" "MCAL_RECUR_DAILY" "MCAL_RECUR_WEEKLY"
;        "MCAL_RECUR_MONTHLY_MDAY" "MCAL_RECUR_MONTHLY_WDAY"
;        "MCAL_RECUR_YEARLY" "MCAL_M_SUNDAY" "MCAL_M_MONDAY"
;        "MCAL_M_TUESDAY" "MCAL_M_WEDNESDAY" "MCAL_M_THURSDAY"
;        "MCAL_M_FRIDAY" "MCAL_M_SATURDAY" "MCAL_M_WEEKDAYS"
;        "MCAL_M_WEEKEND" "MCAL_M_ALLDAYS" "MCRYPT_" "MCRYPT_"
;        "MCRYPT_ENCRYPT" "MCRYPT_DECRYPT" "MCRYPT_DEV_RANDOM"
;        "MCRYPT_DEV_URANDOM" "MCRYPT_RAND" "SWFBUTTON_HIT"
;        "SWFBUTTON_DOWN" "SWFBUTTON_OVER" "SWFBUTTON_UP"
;        "SWFBUTTON_MOUSEUPOUTSIDE" "SWFBUTTON_DRAGOVER"
;        "SWFBUTTON_DRAGOUT" "SWFBUTTON_MOUSEUP" "SWFBUTTON_MOUSEDOWN"
;        "SWFBUTTON_MOUSEOUT" "SWFBUTTON_MOUSEOVER"
;        "SWFFILL_RADIAL_GRADIENT" "SWFFILL_LINEAR_GRADIENT"
;        "SWFFILL_TILED_BITMAP" "SWFFILL_CLIPPED_BITMAP"
;        "SWFTEXTFIELD_HASLENGTH" "SWFTEXTFIELD_NOEDIT"
;        "SWFTEXTFIELD_PASSWORD" "SWFTEXTFIELD_MULTILINE"
;        "SWFTEXTFIELD_WORDWRAP" "SWFTEXTFIELD_DRAWBOX"
;        "SWFTEXTFIELD_NOSELECT" "SWFTEXTFIELD_HTML"
;        "SWFTEXTFIELD_ALIGN_LEFT" "SWFTEXTFIELD_ALIGN_RIGHT"
;        "SWFTEXTFIELD_ALIGN_CENTER" "SWFTEXTFIELD_ALIGN_JUSTIFY"
;        "UDM_FIELD_URLID" "UDM_FIELD_URL" "UDM_FIELD_CONTENT"
;        "UDM_FIELD_TITLE" "UDM_FIELD_KEYWORDS" "UDM_FIELD_DESC"
;        "UDM_FIELD_DESCRIPTION" "UDM_FIELD_TEXT" "UDM_FIELD_SIZE"
;        "UDM_FIELD_RATING" "UDM_FIELD_SCORE" "UDM_FIELD_MODIFIED"
;        "UDM_FIELD_ORDER" "UDM_FIELD_CRC" "UDM_FIELD_CATEGORY"
;        "UDM_PARAM_PAGE_SIZE" "UDM_PARAM_PAGE_NUM"
;        "UDM_PARAM_SEARCH_MODE" "UDM_PARAM_CACHE_MODE"
;        "UDM_PARAM_TRACK_MODE" "UDM_PARAM_PHRASE_MODE"
;        "UDM_PARAM_CHARSET" "UDM_PARAM_STOPTABLE"
;        "UDM_PARAM_STOP_TABLE" "UDM_PARAM_STOPFILE"
;        "UDM_PARAM_STOP_FILE" "UDM_PARAM_WEIGHT_FACTOR"
;        "UDM_PARAM_WORD_MATCH" "UDM_PARAM_MAX_WORD_LEN"
;        "UDM_PARAM_MAX_WORDLEN" "UDM_PARAM_MIN_WORD_LEN"
;        "UDM_PARAM_MIN_WORDLEN" "UDM_PARAM_ISPELL_PREFIXES"
;        "UDM_PARAM_ISPELL_PREFIX" "UDM_PARAM_PREFIXES"
;        "UDM_PARAM_PREFIX" "UDM_PARAM_CROSS_WORDS"
;        "UDM_PARAM_CROSSWORDS" "UDM_LIMIT_CAT" "UDM_LIMIT_URL"
;        "UDM_LIMIT_TAG" "UDM_LIMIT_LANG" "UDM_LIMIT_DATE"
;        "UDM_PARAM_FOUND" "UDM_PARAM_NUM_ROWS" "UDM_PARAM_WORDINFO"
;        "UDM_PARAM_WORD_INFO" "UDM_PARAM_SEARCHTIME"
;        "UDM_PARAM_SEARCH_TIME" "UDM_PARAM_FIRST_DOC"
;        "UDM_PARAM_LAST_DOC" "UDM_MODE_ALL" "UDM_MODE_ANY"
;        "UDM_MODE_BOOL" "UDM_MODE_PHRASE" "UDM_CACHE_ENABLED"
;        "UDM_CACHE_DISABLED" "UDM_TRACK_ENABLED" "UDM_TRACK_DISABLED"
;        "UDM_PHRASE_ENABLED" "UDM_PHRASE_DISABLED"
;        "UDM_CROSS_WORDS_ENABLED" "UDM_CROSSWORDS_ENABLED"
;        "UDM_CROSS_WORDS_DISABLED" "UDM_CROSSWORDS_DISABLED"
;        "UDM_PREFIXES_ENABLED" "UDM_PREFIX_ENABLED"
;        "UDM_ISPELL_PREFIXES_ENABLED" "UDM_ISPELL_PREFIX_ENABLED"
;        "UDM_PREFIXES_DISABLED" "UDM_PREFIX_DISABLED"
;        "UDM_ISPELL_PREFIXES_DISABLED" "UDM_ISPELL_PREFIX_DISABLED"
;        "UDM_ISPELL_TYPE_AFFIX" "UDM_ISPELL_TYPE_SPELL"
;        "UDM_ISPELL_TYPE_DB" "UDM_ISPELL_TYPE_SERVER" "UDM_MATCH_WORD"
;        "UDM_MATCH_BEGIN" "UDM_MATCH_SUBSTR" "UDM_MATCH_END"
;        "MSQL_ASSOC" "MSQL_NUM" "MSQL_BOTH" "MYSQL_ASSOC" "MYSQL_NUM"
;        "MYSQL_BOTH" "MYSQL_USE_RESULT" "MYSQL_STORE_RESULT"
;        "OCI_DEFAULT" "OCI_DESCRIBE_ONLY" "OCI_COMMIT_ON_SUCCESS"
;        "OCI_EXACT_FETCH" "SQLT_BFILEE" "SQLT_CFILEE" "SQLT_CLOB"
;        "SQLT_BLOB" "SQLT_RDD" "OCI_B_SQLT_NTY" "OCI_SYSDATE"
;        "OCI_B_BFILE" "OCI_B_CFILEE" "OCI_B_CLOB" "OCI_B_BLOB"
;        "OCI_B_ROWID" "OCI_B_CURSOR" "OCI_B_BIN" "OCI_ASSOC" "OCI_NUM"
;        "OCI_BOTH" "OCI_RETURN_NULLS" "OCI_RETURN_LOBS"
;        "OCI_DTYPE_FILE" "OCI_DTYPE_LOB" "OCI_DTYPE_ROWID" "OCI_D_FILE"
;        "OCI_D_LOB" "OCI_D_ROWID" "ODBC_TYPE" "ODBC_BINMODE_PASSTHRU"
;        "ODBC_BINMODE_RETURN" "ODBC_BINMODE_CONVERT" "SQL_ODBC_CURSORS"
;        "SQL_CUR_USE_DRIVER" "SQL_CUR_USE_IF_NEEDED" "SQL_CUR_USE_ODBC"
;        "SQL_CONCURRENCY" "SQL_CONCUR_READ_ONLY" "SQL_CONCUR_LOCK"
;        "SQL_CONCUR_ROWVER" "SQL_CONCUR_VALUES" "SQL_CURSOR_TYPE"
;        "SQL_CURSOR_FORWARD_ONLY" "SQL_CURSOR_KEYSET_DRIVEN"
;        "SQL_CURSOR_DYNAMIC" "SQL_CURSOR_STATIC" "SQL_KEYSET_SIZE"
;        "SQL_CHAR" "SQL_VARCHAR" "SQL_LONGVARCHAR" "SQL_DECIMAL"
;        "SQL_NUMERIC" "SQL_BIT" "SQL_TINYINT" "SQL_SMALLINT"
;        "SQL_INTEGER" "SQL_BIGINT" "SQL_REAL" "SQL_FLOAT" "SQL_DOUBLE"
;        "SQL_BINARY" "SQL_VARBINARY" "SQL_LONGVARBINARY" "SQL_DATE"
;        "SQL_TIME" "SQL_TIMESTAMP" "SQL_TYPE_DATE" "SQL_TYPE_TIME"
;        "SQL_TYPE_TIMESTAMP" "SQL_BEST_ROWID" "SQL_ROWVER"
;        "SQL_SCOPE_CURROW" "SQL_SCOPE_TRANSACTION" "SQL_SCOPE_SESSION"
;        "SQL_NO_NULLS" "SQL_NULLABLE" "SQL_INDEX_UNIQUE"
;        "SQL_INDEX_ALL" "SQL_ENSURE" "SQL_QUICK"
;        "X509_PURPOSE_SSL_CLIENT" "X509_PURPOSE_SSL_SERVER"
;        "X509_PURPOSE_NS_SSL_SERVER" "X509_PURPOSE_SMIME_SIGN"
;        "X509_PURPOSE_SMIME_ENCRYPT" "X509_PURPOSE_CRL_SIGN"
;        "X509_PURPOSE_ANY" "PKCS7_DETACHED" "PKCS7_TEXT"
;        "PKCS7_NOINTERN" "PKCS7_NOVERIFY" "PKCS7_NOCHAIN"
;        "PKCS7_NOCERTS" "PKCS7_NOATTR" "PKCS7_BINARY" "PKCS7_NOSIGS"
;        "OPENSSL_PKCS1_PADDING" "OPENSSL_SSLV23_PADDING"
;        "OPENSSL_NO_PADDING" "OPENSSL_PKCS1_OAEP_PADDING"
;        "ORA_BIND_INOUT" "ORA_BIND_IN" "ORA_BIND_OUT"
;        "ORA_FETCHINTO_ASSOC" "ORA_FETCHINTO_NULLS"
;        "PREG_PATTERN_ORDER" "PREG_SET_ORDER" "PREG_SPLIT_NO_EMPTY"
;        "PREG_SPLIT_DELIM_CAPTURE"
;        "PGSQL_ASSOC" "PGSQL_NUM" "PGSQL_BOTH"
;        "PRINTER_COPIES" "PRINTER_MODE" "PRINTER_TITLE"
;        "PRINTER_DEVICENAME" "PRINTER_DRIVERVERSION"
;        "PRINTER_RESOLUTION_Y" "PRINTER_RESOLUTION_X" "PRINTER_SCALE"
;        "PRINTER_BACKGROUND_COLOR" "PRINTER_PAPER_LENGTH"
;        "PRINTER_PAPER_WIDTH" "PRINTER_PAPER_FORMAT"
;        "PRINTER_FORMAT_CUSTOM" "PRINTER_FORMAT_LETTER"
;        "PRINTER_FORMAT_LEGAL" "PRINTER_FORMAT_A3" "PRINTER_FORMAT_A4"
;        "PRINTER_FORMAT_A5" "PRINTER_FORMAT_B4" "PRINTER_FORMAT_B5"
;        "PRINTER_FORMAT_FOLIO" "PRINTER_ORIENTATION"
;        "PRINTER_ORIENTATION_PORTRAIT" "PRINTER_ORIENTATION_LANDSCAPE"
;        "PRINTER_TEXT_COLOR" "PRINTER_TEXT_ALIGN" "PRINTER_TA_BASELINE"
;        "PRINTER_TA_BOTTOM" "PRINTER_TA_TOP" "PRINTER_TA_CENTER"
;        "PRINTER_TA_LEFT" "PRINTER_TA_RIGHT" "PRINTER_PEN_SOLID"
;        "PRINTER_PEN_DASH" "PRINTER_PEN_DOT" "PRINTER_PEN_DASHDOT"
;        "PRINTER_PEN_DASHDOTDOT" "PRINTER_PEN_INVISIBLE"
;        "PRINTER_BRUSH_SOLID" "PRINTER_BRUSH_CUSTOM"
;        "PRINTER_BRUSH_DIAGONAL" "PRINTER_BRUSH_CROSS"
;        "PRINTER_BRUSH_DIAGCROSS" "PRINTER_BRUSH_FDIAGONAL"
;        "PRINTER_BRUSH_HORIZONTAL" "PRINTER_BRUSH_VERTICAL"
;        "PRINTER_FW_THIN" "PRINTER_FW_ULTRALIGHT" "PRINTER_FW_LIGHT"
;        "PRINTER_FW_NORMAL" "PRINTER_FW_MEDIUM" "PRINTER_FW_BOLD"
;        "PRINTER_FW_ULTRABOLD" "PRINTER_FW_HEAVY" "PRINTER_ENUM_LOCAL"
;        "PRINTER_ENUM_NAME" "PRINTER_ENUM_SHARED"
;        "PRINTER_ENUM_DEFAULT" "PRINTER_ENUM_CONNECTIONS"
;        "PRINTER_ENUM_NETWORK" "PRINTER_ENUM_REMOTE" "PSPELL_FAST"
;        "PSPELL_NORMAL" "PSPELL_BAD_SPELLERS" "PSPELL_RUN_TOGETHER"
;        "SID" "SID" "AF_UNIX" "AF_INET" "SOCK_STREAM" "SOCK_DGRAM"
;        "SOCK_RAW" "SOCK_SEQPACKET" "SOCK_RDM" "MSG_OOB" "MSG_WAITALL"
;        "MSG_PEEK" "MSG_DONTROUTE" "SO_DEBUG" "SO_REUSEADDR"
;        "SO_KEEPALIVE" "SO_DONTROUTE" "SO_LINGER" "SO_BROADCAST"
;        "SO_OOBINLINE" "SO_SNDBUF" "SO_RCVBUF" "SO_SNDLOWAT"
;        "SO_RCVLOWAT" "SO_SNDTIMEO" "SO_RCVTIMEO" "SO_TYPE" "SO_ERROR"
;        "SOL_SOCKET" "PHP_NORMAL_READ" "PHP_BINARY_READ"
;        "PHP_SYSTEM_READ" "SOL_TCP" "SOL_UDP" "MOD_COLOR" "MOD_MATRIX"
;        "TYPE_PUSHBUTTON" "TYPE_MENUBUTTON" "BSHitTest" "BSDown"
;        "BSOver" "BSUp" "OverDowntoIdle" "IdletoOverDown"
;        "OutDowntoIdle" "OutDowntoOverDown" "OverDowntoOutDown"
;        "OverUptoOverDown" "OverUptoIdle" "IdletoOverUp" "ButtonEnter"
;        "ButtonExit" "MenuEnter" "MenuExit" "XML_ERROR_NONE"
;        "XML_ERROR_NO_MEMORY" "XML_ERROR_SYNTAX"
;        "XML_ERROR_NO_ELEMENTS" "XML_ERROR_INVALID_TOKEN"
;        "XML_ERROR_UNCLOSED_TOKEN" "XML_ERROR_PARTIAL_CHAR"
;        "XML_ERROR_TAG_MISMATCH" "XML_ERROR_DUPLICATE_ATTRIBUTE"
;        "XML_ERROR_JUNK_AFTER_DOC_ELEMENT" "XML_ERROR_PARAM_ENTITY_REF"
;        "XML_ERROR_UNDEFINED_ENTITY" "XML_ERROR_RECURSIVE_ENTITY_REF"
;        "XML_ERROR_ASYNC_ENTITY" "XML_ERROR_BAD_CHAR_REF"
;        "XML_ERROR_BINARY_ENTITY_REF"
;        "XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"
;        "XML_ERROR_MISPLACED_XML_PI" "XML_ERROR_UNKNOWN_ENCODING"
;        "XML_ERROR_INCORRECT_ENCODING"
;        "XML_ERROR_UNCLOSED_CDATA_SECTION"
;        "XML_ERROR_EXTERNAL_ENTITY_HANDLING" "XML_OPTION_CASE_FOLDING"
;        "XML_OPTION_TARGET_ENCODING" "XML_OPTION_SKIP_TAGSTART"
;        "XML_OPTION_SKIP_WHITE" "YPERR_BADARGS" "YPERR_BADDB"
;        "YPERR_BUSY" "YPERR_DOMAIN" "YPERR_KEY" "YPERR_MAP"
;        "YPERR_NODOM" "YPERR_NOMORE" "YPERR_PMAP" "YPERR_RESRC"
;        "YPERR_RPC" "YPERR_YPBIND" "YPERR_YPERR" "YPERR_YPSERV"
;        "YPERR_VERS" "FORCE_GZIP" "FORCE_DEFLATE"
</span>
       <span class="comment">;; PEAR constants
;        "PEAR_ERROR_RETURN" "PEAR_ERROR_PRINT" "PEAR_ERROR_TRIGGER"
;        "PEAR_ERROR_DIE" "PEAR_ERROR_CALLBACK" "OS_WINDOWS" "OS_UNIX"
;        "PEAR_OS" "DB_OK" "DB_ERROR" "DB_ERROR_SYNTAX"
;        "DB_ERROR_CONSTRAINT" "DB_ERROR_NOT_FOUND"
;        "DB_ERROR_ALREADY_EXISTS" "DB_ERROR_UNSUPPORTED"
;        "DB_ERROR_MISMATCH" "DB_ERROR_INVALID" "DB_ERROR_NOT_CAPABLE"
;        "DB_ERROR_TRUNCATED" "DB_ERROR_INVALID_NUMBER"
;        "DB_ERROR_INVALID_DATE" "DB_ERROR_DIVZERO"
;        "DB_ERROR_NODBSELECTED" "DB_ERROR_CANNOT_CREATE"
;        "DB_ERROR_CANNOT_DELETE" "DB_ERROR_CANNOT_DROP"
;        "DB_ERROR_NOSUCHTABLE" "DB_ERROR_NOSUCHFIELD"
;        "DB_ERROR_NEED_MORE_DATA" "DB_ERROR_NOT_LOCKED"
;        "DB_ERROR_VALUE_COUNT_ON_ROW" "DB_ERROR_INVALID_DSN"
;        "DB_ERROR_CONNECT_FAILED" "DB_WARNING" "DB_WARNING_READ_ONLY"
;        "DB_PARAM_SCALAR" "DB_PARAM_OPAQUE" "DB_BINMODE_PASSTHRU"
;        "DB_BINMODE_RETURN" "DB_BINMODE_CONVERT" "DB_FETCHMODE_DEFAULT"
;        "DB_FETCHMODE_ORDERED" "DB_FETCHMODE_ASSOC"
;        "DB_FETCHMODE_FLIPPED" "DB_GETMODE_ORDERED" "DB_GETMODE_ASSOC"
;        "DB_GETMODE_FLIPPED" "DB_TABLEINFO_ORDER"
;        "DB_TABLEINFO_ORDERTABLE" "DB_TABLEINFO_FULL"
</span>
       )))
  <span class="string">"PHP constants."</span>)

(<span class="keyword">defconst</span> <span class="variable-name">php-keywords</span>
  (<span class="keyword">eval-when-compile</span>
    (regexp-opt
     <span class="comment">;; "class", "new" and "extends" get special treatment
</span>     <span class="comment">;; "case" and  "default" get special treatment elsewhere
</span>     '(<span class="string">"and"</span> <span class="string">"as"</span> <span class="string">"break"</span> <span class="string">"continue"</span> <span class="string">"declare"</span> <span class="string">"do"</span> <span class="string">"echo"</span> <span class="string">"else"</span> <span class="string">"elseif"</span>
       <span class="string">"endfor"</span> <span class="string">"endforeach"</span> <span class="string">"endif"</span> <span class="string">"endswitch"</span> <span class="string">"endwhile"</span> <span class="string">"exit"</span>
       <span class="string">"extends"</span> <span class="string">"for"</span> <span class="string">"foreach"</span> <span class="string">"global"</span> <span class="string">"if"</span> <span class="string">"include"</span> <span class="string">"include_once"</span>
       <span class="string">"next"</span> <span class="string">"or"</span> <span class="string">"require"</span> <span class="string">"require_once"</span> <span class="string">"return"</span> <span class="string">"static"</span> <span class="string">"switch"</span>
       <span class="string">"then"</span> <span class="string">"var"</span> <span class="string">"while"</span> <span class="string">"xor"</span> <span class="string">"private"</span> <span class="string">"throw"</span> <span class="string">"catch"</span> <span class="string">"try"</span>
       <span class="string">"instanceof"</span> <span class="string">"catch all"</span> <span class="string">"finally"</span>)))
  <span class="string">"PHP keywords."</span>)

(<span class="keyword">defconst</span> <span class="variable-name">php-identifier</span>
  (<span class="keyword">eval-when-compile</span>
    '<span class="string">"[a-zA-Z\_\x7f-\xff][a-zA-Z0-9\_\x7f-\xff]*"</span>)
  <span class="string">"Characters in a PHP identifier."</span>)

(<span class="keyword">defconst</span> <span class="variable-name">php-types</span>
  (<span class="keyword">eval-when-compile</span>
    (regexp-opt '(<span class="string">"array"</span> <span class="string">"bool"</span> <span class="string">"boolean"</span> <span class="string">"char"</span> <span class="string">"const"</span> <span class="string">"double"</span> <span class="string">"float"</span>
                  <span class="string">"int"</span> <span class="string">"integer"</span> <span class="string">"long"</span> <span class="string">"mixed"</span> <span class="string">"object"</span> <span class="string">"real"</span>
                  <span class="string">"string"</span>)))
  <span class="string">"PHP types."</span>)

(<span class="keyword">defconst</span> <span class="variable-name">php-superglobals</span>
  (<span class="keyword">eval-when-compile</span>
    (regexp-opt '(<span class="string">"_GET"</span> <span class="string">"_POST"</span> <span class="string">"_COOKIE"</span> <span class="string">"_SESSION"</span> <span class="string">"_ENV"</span> <span class="string">"GLOBALS"</span>
                  <span class="string">"_SERVER"</span> <span class="string">"_FILES"</span> <span class="string">"_REQUEST"</span>)))
  <span class="string">"PHP superglobal variables."</span>)

<span class="comment">;; Set up font locking
</span>(<span class="keyword">defconst</span> <span class="variable-name">php-font-lock-keywords-1</span>
  (list
   <span class="comment">;; Fontify constants
</span>   (cons
    (concat <span class="string">"\\&lt;\\("</span> php-constants <span class="string">"\\)\\&gt;"</span>)
    'font-lock-constant-face)

   <span class="comment">;; Fontify keywords
</span>   (cons
    (concat <span class="string">"\\&lt;\\("</span> php-keywords <span class="string">"\\)\\&gt;"</span>)
    'font-lock-keyword-face)

   <span class="comment">;; Fontify keywords and targets, and case default tags.
</span>   (list <span class="string">"\\&lt;\\(break\\|case\\|continue\\)\\&gt;[ \t]*\\(-?\\(?:\\sw\\|\\s_\\)+\\)?"</span>
         '(1 font-lock-keyword-face) '(2 font-lock-constant-face t t))
   <span class="comment">;; This must come after the one for keywords and targets.
</span>   '(<span class="string">":"</span> (<span class="string">"^[ \t]*\\(\\(?:\\sw\\|\\s_\\)+\\)[ \t]*:[ \t]*$"</span>
          (beginning-of-line) (end-of-line)
          (1 font-lock-constant-face)))

   <span class="comment">;; treat 'print' as keyword only when not used like a function name
</span>   '(<span class="string">"\\&lt;print\\s-*("</span> . php-default-face)
   '(<span class="string">"\\&lt;print\\&gt;"</span> . font-lock-keyword-face)

   <span class="comment">;; Fontify PHP tag
</span>   '(<span class="string">"&lt;\\?\\(php\\)?"</span> . font-lock-constant-face)
   '(<span class="string">"\\?&gt;"</span> . font-lock-constant-face)

   <span class="comment">;; Fontify ASP-style tag
</span>   '(<span class="string">"&lt;\\%\\(=\\)?"</span> . font-lock-constant-face)
   '(<span class="string">"\\%&gt;"</span> . font-lock-constant-face)

   )
  <span class="string">"Subdued level highlighting for PHP mode."</span>)

(<span class="keyword">defconst</span> <span class="variable-name">php-font-lock-keywords-2</span>
  (append
   php-font-lock-keywords-1
   (list

    <span class="comment">;; class declaration
</span>    '(<span class="string">"[^_]\\&lt;\\(class\\|interface\\)[ \t]*\\(\\(?:\\sw\\|\\s_\\)+\\)?"</span>
      (1 font-lock-keyword-face) (2 font-lock-type-face nil t))
    <span class="comment">;; handle several words specially, to include following word,
</span>    <span class="comment">;; thereby excluding it from unknown-symbol checks later
</span>    <span class="comment">;; FIX to handle implementing multiple
</span>    <span class="comment">;; currently breaks on "class Foo implements Bar, Baz"
</span>    '(<span class="string">"\\&lt;\\(new\\|extends\\|implements\\)\\s-+\\$?\\(\\(?:\\sw\\|\\s_\\)+\\)"</span>
      (1 font-lock-keyword-face) (2 font-lock-type-face))

    <span class="comment">;; function declaration
</span>    '(<span class="string">"\\&lt;\\(function\\)\\s-+&amp;?\\(\\(?:\\sw\\|\\s_\\)+\\)\\s-*("</span>
      (1 font-lock-keyword-face)
      (2 font-lock-function-name-face nil t))

    <span class="comment">;; class hierarchy
</span>    '(<span class="string">"\\(self\\|parent\\)\\W"</span> (1 font-lock-constant-face nil nil))

    <span class="comment">;; method and variable features
</span>    '(<span class="string">"\\&lt;\\(private\\|protected\\|public\\)\\s-+\\$?\\(?:\\sw\\|\\s_\\)+"</span>
      (1 font-lock-keyword-face))

    <span class="comment">;; method features
</span>    '(<span class="string">"^[ \t]*\\(abstract\\|static\\|final\\)\\s-+\\$?\\(?:\\sw\\|\\s_\\)+"</span>
      (1 font-lock-keyword-face))

    <span class="comment">;; variable features
</span>    '(<span class="string">"^[ \t]*\\(static\\|const\\)\\s-+\\$?\\(?:\\sw\\|\\s_\\)+"</span>
      (1 font-lock-keyword-face))
    ))
  <span class="string">"Medium level highlighting for PHP mode."</span>)

(<span class="keyword">defconst</span> <span class="variable-name">php-font-lock-keywords-3</span>
  (append
   php-font-lock-keywords-2
   (list

    <span class="comment">;; &lt;word&gt; or &lt;/word&gt; for HTML
</span>    <span class="comment">;;'("&lt;/?\\sw+[^&gt; ]*&gt;" . font-lock-constant-face)
</span>    <span class="comment">;;'("&lt;/?\\sw+[^&gt;]*" . font-lock-constant-face)
</span>    <span class="comment">;;'("&lt;!DOCTYPE" . font-lock-constant-face)
</span>    '(<span class="string">"&lt;/?[a-z!:]+"</span> . font-lock-constant-face)

    <span class="comment">;; HTML &gt;
</span>    '(<span class="string">"&lt;[^&gt;]*\\(&gt;\\)"</span> (1 font-lock-constant-face))

    <span class="comment">;; HTML tags
</span>    '(<span class="string">"\\(&lt;[a-z]+\\)[[:space:]]+\\([a-z:]+=\\)[^&gt;]*?"</span> (1 font-lock-constant-face) (2 font-lock-constant-face) )
    '(<span class="string">"\"[[:space:]]+\\([a-z:]+=\\)"</span> (1 font-lock-constant-face))

    <span class="comment">;; HTML entities
</span>    <span class="comment">;;'("&amp;\\w+;" . font-lock-variable-name-face)
</span>
    <span class="comment">;; warn about '$' immediately after -&gt;
</span>    '(<span class="string">"\\$\\(?:\\sw\\|\\s_\\)+-&gt;\\s-*\\(\\$\\)\\(\\(?:\\sw\\|\\s_\\)+\\)"</span>
      (1 font-lock-warning-face) (2 php-default-face))

    <span class="comment">;; warn about $word.word -- it could be a valid concatenation,
</span>    <span class="comment">;; but without any spaces we'll assume $word-&gt;word was meant.
</span>    '(<span class="string">"\\$\\(?:\\sw\\|\\s_\\)+\\(\\.\\)\\sw"</span>
      1 font-lock-warning-face)

    <span class="comment">;; Warn about ==&gt; instead of =&gt;
</span>    '(<span class="string">"==+&gt;"</span> . font-lock-warning-face)

    <span class="comment">;; exclude casts from bare-word treatment (may contain spaces)
</span>    `(,(concat <span class="string">"(\\s-*\\("</span> php-types <span class="string">"\\)\\s-*)"</span>)
      1 font-lock-type-face)

    <span class="comment">;; PHP5: function declarations may contain classes as parameters type
</span>    `(,(concat <span class="string">"[(,]\\s-*\\(\\(?:\\sw\\|\\s_\\)+\\)\\s-+&amp;?\\$\\(?:\\sw\\|\\s_\\)+\\&gt;"</span>)
      1 font-lock-type-face)

    <span class="comment">;; Fontify variables and function calls
</span>    '(<span class="string">"\\$\\(this\\|that\\)\\W"</span> (1 font-lock-constant-face nil nil))
    `(,(concat <span class="string">"\\$\\("</span> php-superglobals <span class="string">"\\)\\W"</span>)
      (1 font-lock-constant-face nil nil)) <span class="comment">; $_GET &amp; co
</span>    '(<span class="string">"\\$\\(\\(?:\\sw\\|\\s_\\)+\\)"</span> (1 font-lock-variable-name-face)) <span class="comment">; $variable
</span>    '(<span class="string">"-&gt;\\(\\(?:\\sw\\|\\s_\\)+\\)"</span> (1 font-lock-variable-name-face t t)) <span class="comment">; -&gt;variable
</span>    '(<span class="string">"-&gt;\\(\\(?:\\sw\\|\\s_\\)+\\)\\s-*("</span> . (1 php-default-face t t)) <span class="comment">; -&gt;function_call
</span>    '(<span class="string">"\\(\\(?:\\sw\\|\\s_\\)+\\)::\\(?:\\sw\\|\\s_\\)+\\s-*(?"</span> . (1 font-lock-type-face)) <span class="comment">; class::member
</span>    '(<span class="string">"::\\(\\(?:\\sw\\|\\s_\\)+\\&gt;[^(]\\)"</span> . (1 php-default-face)) <span class="comment">; class::constant
</span>    '(<span class="string">"\\&lt;\\(?:\\sw\\|\\s_\\)+\\s-*[[(]"</span> . php-default-face)    <span class="comment">; word( or word[
</span>    '(<span class="string">"\\&lt;[0-9]+"</span> . php-default-face)           <span class="comment">; number (also matches word)
</span>
    <span class="comment">;; Warn on any words not already fontified
</span>    '(<span class="string">"\\&lt;\\(?:\\sw\\|\\s_\\)+\\&gt;"</span> . font-lock-warning-face)

    ))
  <span class="string">"Gauchy level highlighting for PHP mode."</span>)

<span class="comment">;; Define the imenu-generic-expression for PHP mode.
;; To use, execute M-x imenu, then click on Functions or Classes,
;; then select given function/class name to go to its definition.
;; [Contributed by Gerrit Riessen]
</span>(<span class="keyword">defvar</span> <span class="variable-name">php-imenu-generic-expression</span>
 '(
   (<span class="string">"All Functions"</span>
    <span class="string">"^\\s-*function\\s-+\\([[:alnum:]_]+\\)\\s-*("</span> 1)
   (<span class="string">"Classes"</span>
    <span class="string">"^\\s-*class\\s-+\\([[:alnum:]_]+\\)\\s-*"</span> 1)
   (<span class="string">"Public Methods"</span>
    <span class="string">"^\\s-*public function\\s-+\\([[:alnum:]_]+\\)\\s-*("</span> 1)
   (<span class="string">"Protected Methods"</span>
    <span class="string">"^\\s-*protected function\\s-+\\([[:alnum:]_]+\\)\\s-*("</span> 1)
   (<span class="string">"Private Methods"</span>
    <span class="string">"^\\s-*private function\\s-+\\([[:alnum:]_]+\\)\\s-*("</span> 1)
   )
 <span class="string">"Imenu generic expression for PHP Mode. See `</span><span class="string"><span class="constant">imenu-generic-expression</span></span><span class="string">'."</span>
 )

(<span class="keyword">defconst</span> <span class="variable-name">php-block-stmt-1-kwds</span> '(<span class="string">"do"</span> <span class="string">"else"</span> <span class="string">"finally"</span> <span class="string">"try"</span>))
(<span class="keyword">defconst</span> <span class="variable-name">php-block-stmt-2-kwds</span>
  '(<span class="string">"for"</span> <span class="string">"if"</span> <span class="string">"while"</span> <span class="string">"switch"</span> <span class="string">"foreach"</span> <span class="string">"elseif"</span>  <span class="string">"catch all"</span>))

(<span class="keyword">defconst</span> <span class="variable-name">php-block-stmt-1-key</span>
  (regexp-opt php-block-stmt-1-kwds))
(<span class="keyword">defconst</span> <span class="variable-name">php-block-stmt-2-key</span>
  (regexp-opt php-block-stmt-2-kwds))

(<span class="keyword">defconst</span> <span class="variable-name">php-class-decl-kwds</span> '(<span class="string">"class"</span> <span class="string">"interface"</span>))

(<span class="keyword">defconst</span> <span class="variable-name">php-class-key</span>
  (concat
   <span class="string">"\\("</span> (regexp-opt php-class-decl-kwds) <span class="string">"\\)\\s +"</span>
   c-symbol-key                                 <span class="comment">;; Class name.
</span>   <span class="string">"\\(\\s *extends\\s *"</span> c-symbol-key <span class="string">"\\)?"</span>   <span class="comment">;; Name of superclass.
</span>   <span class="string">"\\(\\s *implements *[^{]+{\\)?"</span>)) <span class="comment">;; List of any adopted protocols.
</span>
<span class="comment">;; Create "php-default-face" symbol for GNU Emacs so that both XEmacs
;; and GNU emacs can refer to the default face.
</span>(<span class="keyword">unless</span> (boundp 'php-default-face)
   (<span class="keyword">defvar</span> <span class="variable-name">php-default-face</span> 'php-default-face))

<span class="comment">;; Create faces for XEmacs
</span>(<span class="keyword">when</span> (<span class="keyword">featurep</span> '<span class="constant">xemacs</span>)
  (<span class="keyword">unless</span> (boundp 'font-lock-keyword-face)
    (copy-face 'bold 'font-lock-keyword-face))
  (<span class="keyword">unless</span> (boundp 'font-lock-constant-face)
    (copy-face 'font-lock-keyword-face 'font-lock-constant-face)))

(<span class="keyword">provide</span> '<span class="constant">php-mode</span>)

<span class="comment">;;; php-mode.el ends here
</span></pre>
  </body>
</html>
